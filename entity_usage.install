<?php

/**
 * @file
 * Install, update and uninstall functions for entity_usage module.
 */

/**
 * Implements hook_schema().
 */
function entity_usage_schema() {
  $schema['entity_usage'] = [
    'description' => 'Track entities that reference other entities.',
    'fields' => [
      'target_id' => [
        'description' => 'The target entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'target_type' => [
        'description' => 'The target entity type.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'source_id' => [
        'description' => 'The source entity ID.',
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => 0,
      ],
      'source_type' => [
        'description' => 'The source entity type.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'source_langcode' => [
        'description' => 'The source entity language code.',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'method' => [
        'description' => 'The method used to track the target, generally the plugin ID.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'field_name' => [
        'description' => 'The field in the source entity containing the target entity.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'count' => [
        'description' => 'The number of times the target entity is referenced in this case.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['target_id', 'target_type', 'source_id', 'source_type', 'source_langcode', 'method', 'field_name'],
    'indexes' => [
      'target_entity' => ['target_type', 'target_id'],
      'target_entity_count' => ['target_id', 'target_type', 'count'],
    ],
  ];
  return $schema;
}

/**
 * Include "method" also as primary key for the {entity_usage} table.
 */
function entity_usage_update_8001(&$sandbox) {
  $database = \Drupal::database();
  $database->schema()->dropPrimaryKey('entity_usage');
  $new_primary_keys = ['t_id', 't_type', 're_id', 're_type', 'method'];
  $database->schema()->addPrimaryKey('entity_usage', $new_primary_keys);
}

/**
 * Recreate the entity usage table with the new schema.
 */
function entity_usage_update_8201(&$sandbox) {
  $schema = \Drupal::database()->schema();
  $schema->dropTable('entity_usage');
  $new_table_schema = entity_usage_schema();
  $schema->createTable('entity_usage', $new_table_schema['entity_usage']);
}

/**
 * Re-generate entity_usage statistics.
 */
function entity_usage_update_8202(&$sandbox) {
  // First pass.
  if (empty($sandbox['total'])) {
    $sandbox['current_key'] = 0;
    $sandbox['total'] = 0;
    $sandbox['entities'] = [];
    foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type_id => $entity_type) {
      // Only look for content entities.
      if ($entity_type->entityClassImplements('\Drupal\Core\Entity\ContentEntityInterface')) {
        // Delete current usage statistics for these entities.
        \Drupal::service('entity_usage.usage')->bulkDeleteSources($entity_type_id);
        // Add all existing ids to be tracked again.
        $ids = \Drupal::entityQuery($entity_type_id)
          ->accessCheck(FALSE)
          ->execute();
        if (!empty($ids)) {
          $sandbox['total'] += count($ids);
          foreach ($ids as $id) {
            $sandbox['entities'][] = [
              'entity_type' => $entity_type_id,
              'entity_id' => $id,
            ];
          }
        }
      }
    }
  }

  // Worker.
  $batch_size = 25;
  for ($i = $sandbox['current_key']; $i < ($sandbox['current_key'] + $batch_size); $i++) {
    if (empty($sandbox['entities'][$i])) {
      break;
    }
    $entity_type = $sandbox['entities'][$i]['entity_type'];
    $entity_id = $sandbox['entities'][$i]['entity_id'];
    if ($entity_type && $entity_id) {
      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
      $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
      if ($entity) {
        \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
        // Track all translations of the entity.
        foreach ($entity->getTranslationLanguages(FALSE) as $translation_language) {
          if ($entity->hasTranslation($translation_language->getId())) {
            \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity->getTranslation($translation_language->getId()));
          }
        }
      }
    }
    $sandbox['current_key']++;
  }

  $sandbox['#finished'] = ($sandbox['current_key'] / $sandbox['total']);
  return t('Finished generating statistics for @total_count entities.', [
    '@total_count' => $sandbox['total'],
  ]);
}
